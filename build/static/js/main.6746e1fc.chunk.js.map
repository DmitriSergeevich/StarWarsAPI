{"version":3,"sources":["components/Header/Header.js","services/SwapiService.js","components/SwappiServiceContext/SwappiServiceContext.js","components/ErrorRender/ErrorRender.js","components/Spiner/Spiner.js","components/RandomPlanet/RandomPlanet.js","components/HOChelpers/WithData.js","components/HOChelpers/WithSwappiService.js","components/ItemList/ItemList.js","components/ListOfItems/ListOfItems.js","components/pages/PeoplePage.js","components/ItemDetails/ItemDetails.js","components/Details/PlanetDetails.js","components/Row/Row.js","components/pages/PlanetPage.js","components/pages/StarshipPage.js","components/Details/StarshipDetails.js","components/Button/Button.js","components/FoundPeopleList/FoundPeopleList.js","components/PaginationControl/PaginationControl.js","components/pages/Main.js","components/Details/PersonDetails.js","components/app/app.js","index.js"],"names":["Header","className","to","SwapiService","_apiBase","_ImageUrlBase","extractId","url","match","transformPerson","person","id","name","gender","birthYear","birth_year","eyeColor","eye_color","getAllPeople","a","getResource","people","results","map","getPerson","transformPlanet","planet","population","diameter","period","rotation_period","getAllPlanet","planets","getPlanet","transformStarship","starship","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","getAllStarships","starships","getStarship","getPersonImage","getStarshipImage","getPlanetImage","validateTerm","term","split","join","getSearchPeople","str","dataPeople","foundPeople","getFoundPeoplePage","pageLink","regExp","fetch","this","res","ok","Error","status","json","React","createContext","SwappiServiceProvider","Provider","SwappiSeviceConsumer","Consumer","ErrorRender","Spiner","RandomPlanet","state","loading","error","onPlanetLoaded","setState","onError","swapi","updatePlanet","Math","floor","random","then","catch","interval","setInterval","clearInterval","hasData","loader","planetInfo","PlanetView","errorLoading","Component","Fragment","src","alt","WithData","View","data","props","getData","WithSwappiService","Wrapped","mapMethodsToProps","serviceProps","ItemList","onItemSelected","renderLabel","children","items","item","label","onClick","withChildFunction","fn","renderName","PersonList","swappi","StarshipList","PlanetList","withRouter","history","push","ItemDetails","image","updateItem","itemId","getImageURL","prevProps","Children","child","idx","cloneElement","Record","field","Row","leftItem","rightItem","PlanetPage","selectedItem","Button","keys","lable","isDisabled","type","disabled","FoundPeopleList","stringedId","String","PaginationControl","nextPage","prevPage","foundCount","onChangePage","prevButton","nextButton","Main","onChange","onInput","matches","foundMatches","style","display","value","placeholder","onKeyDown","e","code","MainContainer","setAppState","target","clearState","searchData","next","previous","count","button","pageURL","key","pageData","appState","App","settings","path","component","exact","PeoplePage","render","params","StarshipPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6746e1fc.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\nimport { Link } from 'react-router-dom';\n\nexport const Header = () => {\n  return (\n    <div className=\"header d-flex\">\n      <h3>\n        <Link to='/'>Star DB</Link>\n      </h3>      \n      <ul className=\"d-flex\">\n        <li>\n          <Link to='/people/'>People</Link>\n        </li>\n        <li>\n          <Link to='/planets/'>Planets</Link>\n        </li>\n        <li>\n          <Link to='/starships/'>Starships</Link>\n        </li>\n      </ul>    \n    </div>\n  )\n}","export default class SwapiService {\n  _apiBase = \"https://swapi.dev/api\";\n  _ImageUrlBase = \"https://starwars-visualguide.com/assets/img\";\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}` + url);\n    if (!res.ok) {\n      throw new Error(\n        `Could not fetch ${this._apiBase + url}, recived ${res.status}`\n      );\n    }\n    return await res.json();\n  }\n\n  extractId = (url) => {\n    const regExp = /\\/([0-9]*)\\/$/;\n    return url.match(regExp)[1];\n  };\n\n  transformPerson = (person) => {\n    return {\n      id: this.extractId(person.url),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color,\n    };\n  };\n\n  getAllPeople = async () => {\n    const people = await this.getResource(\"/people/\");\n    return people.results.map(this.transformPerson);\n  };\n\n  getPerson = async (id) => {\n    const person = await this.getResource(\"/people/\" + id);\n    return this.transformPerson(person);\n  };\n\n  transformPlanet = (planet) => {\n    return {\n      id: this.extractId(planet.url),\n      name: planet.name,\n      population: planet.population,\n      diameter: planet.diameter,\n      period: planet.rotation_period,\n    };\n  };\n\n  getAllPlanet = async () => {\n    const planets = await this.getResource(\"/planets/\");\n    return planets.results.map(this.transformPlanet);\n  };\n\n  getPlanet = async (id) => {\n    const planet = await this.getResource(\"/planets/\" + id);\n    return this.transformPlanet(planet);\n  };\n\n  transformStarship = (starship) => {\n    return {\n      id: this.extractId(starship.url),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity,\n    };\n  };\n\n  getAllStarships = async () => {\n    const starships = await this.getResource(\"/starships/\");\n    return starships.results.map(this.transformStarship);\n  };\n\n  getStarship = async (id) => {\n    const starship = await this.getResource(\"/starships/\" + id);\n    return this.transformStarship(starship);\n  };\n\n  getPersonImage = ({ id }) => {\n    return `${this._ImageUrlBase}/characters/${id}.jpg`;\n  };\n  getStarshipImage = ({ id }) => {\n    return `${this._ImageUrlBase}/starships/${id}.jpg`;\n  };\n  getPlanetImage = ({ id }) => {\n    return `${this._ImageUrlBase}/planets/${id}.jpg`;\n  };\n  \n  validateTerm = (term) => {\n    const regExp = /\\?|=|&|\\//g;    \n    return term.split(regExp).join(' ');\n  }\n\n  getSearchPeople = async (str) => {\n    const term = this.validateTerm(str);\n\n    const dataPeople = await this.getResource(`/people/?search=${term}`);\n\n    return {\n      foundPeople: dataPeople.results.map(this.transformPerson),\n      dataPeople\n    }\n  };\n\n  getFoundPeoplePage = async (pageLink) => {\n    const regExp = /(\\/people\\/\\?search=)([a-zA-Z])(&page=)([0-9]*)/;\n    const url = pageLink.match(regExp)[0];\n    const dataPeople = await this.getResource(url);\n\n    return {\n      foundPeople: dataPeople.results.map(this.transformPerson),\n      dataPeople,\n    };\n  };\n}\n\n","import React from 'react';\n\nexport const {\n  Provider: SwappiServiceProvider,\n  Consumer: SwappiSeviceConsumer\n} = React.createContext();\n","import React from 'react';\nimport './ErrorRender.css';\n\nexport const ErrorRender = () => {\n  return (\n    <div>\n      <h5>Oops...</h5>\n      <p>Something go wrong</p>\n    </div>\n  )\n}","import React from 'react';\n\nimport './Spiner.css';\n\nexport const Spiner = () => {\n  return (    \n    <div className=\"loadingio-spinner-eclipse-o4362mbylv\">\n      <div className=\"ldio-7u5e9lfcd4h\">\n        <div></div>\n      </div>\n    </div>  \n  );\n}","import React, { Component } from 'react';\nimport SwapiService from '../../services/SwapiService';\nimport { ErrorRender } from '../ErrorRender/ErrorRender';\nimport { Spiner } from '../Spiner/Spiner';\nimport './RandomPlanet.css';\n\nexport default class RandomPlanet extends Component {\n  \n  state = {\n    planet: {},\n    loading: true,\n    error: false,\n  }\n  \n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onPlanetLoaded = (planet) => {\n    this.setState({\n      planet,\n      loading: false,\n      error: false\n    });\n  }\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  }\n\n  swapi = new SwapiService();\n\n  updatePlanet = () => {\n    const id = Math.floor(Math.random() * 25) + 3;\n    this.swapi.getPlanet(id)\n    .then(this.onPlanetLoaded)\n    .catch(this.onError)\n  }\n\n  render() {\n    const {planet, loading, error} = this.state;\n    const hasData = !(loading || error);\n    const loader = loading ? <Spiner/> : null;\n    const planetInfo = hasData ? <PlanetView planet={planet}/> : null;\n    const errorLoading = error ? <ErrorRender/> : null;\n\n    return (\n      <div className=\"random-planet jumbotron rounded\">\n        {loader}\n        {planetInfo}\n        {errorLoading}\n      </div>\n    );    \n  }\n}\n\nfunction PlanetView({ planet }) {\n  const {  \n    id,\n    name,\n    population,\n    period,\n    diameter\n  } = planet;\n\n  return (\n    <React.Fragment>\n      <img className=\"planet-image\"\n             src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} \n             alt=\"planet img\"/>\n      <div>\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <span className=\"term\">Population</span>\n            <span>{population}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Rotation Period</span>\n            <span>{period}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </React.Fragment>\n  )\n}","import React, { Component } from 'react';\nimport { Spiner } from '../Spiner/Spiner';\n\nconst WithData = (View) => {\n  return class extends Component {\n\n    state = {\n      data: null\n    };\n\n    componentDidMount() {\n      this.props.getData()\n        .then((data) => {\n          this.setState({\n            data\n          });\n        });\n    }\n\n    render() {\n      const { data } = this.state;\n\n      if (!data) {\n        return <Spiner />;\n      }\n\n      return <View {...this.props} data={data} />;\n    }\n  };\n};\n\nexport default WithData;\n","import React from 'react';\nimport { SwappiSeviceConsumer } from '../SwappiServiceContext/SwappiServiceContext';\n\n\nexport const WithSwappiService = (Wrapped, mapMethodsToProps) => {\n  return (props)=>{\n    return (\n      <SwappiSeviceConsumer >\n        {\n          ({swapi}) => {\n            const serviceProps = mapMethodsToProps(swapi)\n            return (\n            <Wrapped {...props} {...serviceProps} />\n            )\n          }\n        }\n      </SwappiSeviceConsumer>\n    )\n  } \n}","import './ItemList.css';\n\nexport const ItemList = (props) => {\n  const { data, onItemSelected, children: renderLabel } = props;\n\n  const items = data.map((item) => {\n    const { id } = item;\n    const label = renderLabel(item);\n\n    return (\n      <li\n        className=\"list-group-item\"\n        key={id}\n        onClick={() => onItemSelected(id)}\n      >\n        {label}\n      </li>\n    );\n  });\n\n  return <ul className=\"item-list list-group\">{items}</ul>;\n};","import React from \"react\";\nimport WithData from '../HOChelpers/WithData';\nimport { WithSwappiService } from \"../HOChelpers/WithSwappiService\";\nimport { ItemList } from '../ItemList/ItemList';\n\nconst withChildFunction = (Wrapped, fn) => {\n  return (props) => {\n    return (\n      <Wrapped {...props}>\n        {fn}\n      </Wrapped>\n    )\n  }    \n}\n\nconst renderName = ({ name }) => <span>{name}</span>\nconst renderNameAndModel = ({ name, model }) => <span>{`${name} (${model})`}</span>\n\nconst mapPersonMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getAllPeople,\n  }\n}\nconst mapPlanetMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getAllPlanet,\n  }\n}\nconst mapStarshipMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getAllStarships,\n  }\n}\n\nconst PersonList = WithSwappiService( WithData(\n                    withChildFunction(ItemList, renderName)), mapPersonMethodsToProps);\nconst StarshipList = WithSwappiService( WithData(\n                      withChildFunction(ItemList, renderNameAndModel)), mapStarshipMethodsToProps);\nconst PlanetList = WithSwappiService(WithData(\n                     withChildFunction(ItemList, renderName)), mapPlanetMethodsToProps);\n\nexport {PersonList, StarshipList, PlanetList}","import React from 'react';\nimport { PersonList } from '../ListOfItems/ListOfItems';\nimport { withRouter } from 'react-router-dom';\n\nconst PeoplePage = ({ history, match }) => {\n  return (    \n    <PersonList onItemSelected={(id) => history.push(id)}/>\n  )\n}  \n\nexport default withRouter(PeoplePage)","import React, { Component } from 'react';\nimport SwapiService from '../../services/SwapiService';\nimport './ItemDetails.css';\n\nexport default class ItemDetails extends Component {\n  \n  swapi = new SwapiService();\n\n  state = {\n    item: null,\n    image: null\n  }\n  \n  componentDidMount() {\n    this.updateItem();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if(this.props.itemId !== prevProps.itemId) {\n      this.updateItem();\n    }\n  }\n\n  updateItem = () => {\n    const { itemId, getData, getImageURL } = this.props;\n    \n    if(!itemId) {\n      return\n    }\n\n    getData(itemId)\n    .then( (item) => this.setState({\n       item,\n       image: getImageURL(item)\n    }));\n    \n  }\n\n  render() {\n    const { item, image } = this.state\n    if(!this.state.item) {\n      return <span>Select a person from a list</span>\n    }\n\n    const {      \n      name,\n      \n    } = item;\n    \n    return (\n      <div className=\"person-details card\">\n        <img className=\"person-image\"\n          src={image}\n          alt=\"img\"/>\n        <div className=\"card-body\">\n          <h4>{name}</h4>\n          <ul className=\"list-group list-group-flush\">\n            {\n              React.Children.map(this.props.children, (child, idx) => {\n                return React.cloneElement(child, {item});\n            })\n            }\n          </ul>\n          \n        </div>        \n      </div>\n      \n    )\n  }\n}\n\nexport const Record = ({item, label, field}) => {\n  return (\n    \n    <li className=\"list-group-item\">\n      <span className=\"term\">{label}</span>\n      <span>{item[field]}</span>\n    </li>\n  )\n}","import React from 'react';\nimport { WithSwappiService } from '../HOChelpers/WithSwappiService';\nimport ItemDetails, { Record } from \"../ItemDetails/ItemDetails\";\n\n\nconst PlanetDetails = (props) => {\n  return (\n   <ItemDetails {...props}>          \n      <Record field=\"population\" label=\"Population:\"/>\n      <Record field=\"period\" label=\"Rotation period:\"/>\n      <Record field=\"diameter\" label=\"Diameter:\"/>  \n    </ItemDetails>\n  )\n\n}\n\nconst mapMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getPlanet,\n    getImageURL: swappi.getPlanetImage\n  }\n}\n\nexport default WithSwappiService(PlanetDetails, mapMethodsToProps);","import React from \"react\";\n\nexport const Row = ({ leftItem, rightItem }) => {\n  return (\n    <div className=\"row mb2 item-section\">\n        <div className=\"col-md-6\">\n          {leftItem}\n        </div>\n        <div className=\"col-md-6\">\n          {rightItem}\n        </div>\n    </div>\n  )\n}","import React from 'react';\nimport PlanetDetails from '../Details/PlanetDetails';\nimport { PlanetList } from '../ListOfItems/ListOfItems';\nimport { Row } from '../Row/Row';\n\nexport default class PlanetPage extends React.Component {\n  \n  state = {\n    selectedItem: null\n  }\n  \n  onItemSelected = (selectedItem) => {\n    this.setState({ selectedItem });\n  }\n\n  render() {\n    const { selectedItem } = this.state;\n    return (\n      <Row \n        leftItem={<PlanetList onItemSelected={this.onItemSelected}/>}\n        rightItem={< PlanetDetails itemId={selectedItem}/>}\n      />\n    )\n  }  \n}","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { StarshipList } from '../ListOfItems/ListOfItems';\n\n\nconst StarshipPage = ({ history }) => {  \n  return (\n    <StarshipList\n      onItemSelected={(id) => {\n        history.push(id)\n      }}/>\n  )\n}\n\nexport default withRouter(StarshipPage);","import React from 'react';\nimport { WithSwappiService } from '../HOChelpers/WithSwappiService';\nimport ItemDetails, { Record } from \"../ItemDetails/ItemDetails\";\n\n\nconst StarshipDetails = (props) => {  \n  return (\n    <ItemDetails {...props}>\n      <Record field=\"model\" label=\"Model:\"/>\n      <Record field=\"length\" label=\"Length:\"/>\n      <Record field=\"costInCredits\" label=\"Cost:\"/>\n    </ItemDetails>\n  )\n  \n}\n\nconst mapMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getStarship,\n    getImageURL: swappi.getStarshipImage\n  }\n}\n\nexport default WithSwappiService(StarshipDetails, mapMethodsToProps);","import React from 'react';\n\nexport const Button = ({keys, onClick, lable, isDisabled = false}) => {\n  return (\n    <button\n      key={keys}\n      type=\"button\"\n      onClick={onClick}\n      className=\"btn btn-info\"\n      disabled={isDisabled}\n    >\n      {lable}\n    </button>\n  );\n}","import React from \"react\";\n\nexport const FoundPeopleList = (foundPeople, history) => {\n return foundPeople.map(item => {\n    const { id, name } = item;\n    const stringedId = String(id);\n    return (\n      <li\n        className=\"list-group-item\"\n        key={ id }\n        onClick={(id) => history.push(\"/people/\" + stringedId)}\n      >\n        { name }\n      </li>\n    );\n  });  \n}","import React from 'react';\nimport { Button } from '../Button/Button';\nimport './PaginationControl.css';\n\nexport  const PaginationControl = ({nextPage, prevPage, foundCount, loading, onChangePage}) => {\n  const prevButton = prevPage ? (\n    <Button\n      key={\"prev\"}\n      onClick={() => onChangePage(prevButton)}\n      lable=\"&lt; Prev\"\n    />\n  ) : (\n    <Button\n      key={\"prev\"}\n      onClick={() => onChangePage(prevButton)}\n      lable=\"&lt; Prev\"\n      isDisabled={true}\n    />\n  );\n  \n  const nextButton = nextPage ? (\n    <Button\n      key={\"next\"}\n      onClick={() => onChangePage(nextButton)}\n      lable=\"Next &gt;\"    \n    />\n  ) : (\n    <Button\n      key={\"next\"}\n      onClick={() => onChangePage(nextButton)}\n      lable=\"Next &gt;\"\n      isDisabled={true}\n    />\n  );\n  \n  return  foundCount > 10 && !loading ? (\n    <div className=\"btn-group btn-group_pagination\">\n      {prevButton}\n      {nextButton}\n    </div>\n  ) : null;\n}","import React from \"react\";\nimport SwapiService from \"../../services/SwapiService\";\nimport { Button } from \"../Button/Button\";\nimport { FoundPeopleList } from \"../FoundPeopleList/FoundPeopleList\";\nimport { PaginationControl } from \"../PaginationControl/PaginationControl\";\nimport { Spiner } from \"../Spiner/Spiner\";\nimport './Main.css';\n\nconst Main = ({state, onChange, onInput, onChangePage, history}) => {\n  const { nextPage, prevPage, foundCount, foundPeople, loading, term } = state;\n  \n  const matches = foundCount === 1 ? \"match\" : \"matches\";\n\n  const foundMatches = foundCount !== null ? (\n    <h6 className='found-count'>\n      Found {foundCount} {matches}\n    </h6>\n  ) : null;\n  \n  const loader = loading ? <Spiner/> : null;\n\n  return (\n    <div>\n      <h4 className=\"section-article\">Find a character</h4>\n      <div style={{ display: \"flex\" }}>\n        <input\n          value={ term }\n          type=\"text\"\n          className=\"form-control search-input\"\n          placeholder=\"Type to search\"\n          onChange={ onChange }\n          onKeyDown={ e => e.code === 'Enter' && onInput() }\n        />\n        <Button key={ \"find\" } onClick={ onInput } lable=\"Find\" />\n      </div>\n      {foundMatches}\n      {loader}\n      <ul className=\"item-list list-group\">{ FoundPeopleList(foundPeople, history) }</ul>      \n      < PaginationControl nextPage={nextPage} prevPage={prevPage} foundCount={foundCount} loading={loading} onChangePage={onChangePage} />\n    </div>\n  );\n};\n\nexport default class MainContainer extends React.Component {\n  state = {\n    term: \"\",\n    foundPeople: [],\n    nextPage: null,\n    prevPage: null,\n    foundCount: null,\n    loading: false,\n  };\n  \n  setAppState = this.props.setAppState;\n\n  componentDidMount() {\n   this.setState({...this.props.appState})\n  }\n\n  swapi = new SwapiService();\n\n  onChange = (e) => {\n    const term = e.target.value;\n\n    if (term !== \"\" && term !== null) {\n      this.setState({ term });\n     \n    } else {\n      const clearState = {\n        term: \"\",\n        foundPeople: [],\n        nextPage: null,\n        prevPage: null,\n        foundCount: null,\n        loading: false,\n      }\n\n      this.setState(clearState)\n\n      this.setAppState(clearState)\n    }\n  };\n  \n  onInput = () => {\n    if (this.state.term !== \"\") {\n      this.setState({ loading: true, foundPeople: [] });\n\n      this.swapi.getSearchPeople(this.state.term)\n        .then(({ foundPeople, dataPeople }) => {\n          const searchData = {\n            foundPeople,\n            nextPage: dataPeople.next,\n            prevPage: dataPeople.previous,\n            foundCount: dataPeople.count,\n            loading: false,\n            term: this.state.term\n          }\n\n          this.setState(searchData)\n\n          this.setAppState(searchData)\n        }\n      );\n    };\n  }\n\n  onChangePage = (button) => {\n    this.setState({\n      loading: true, foundPeople: []\n    })\n\n    const pageURL =\n      button.key === \"next\" ? this.state.nextPage : this.state.prevPage;\n\n    this.swapi.getFoundPeoplePage(pageURL)\n    .then(({ foundPeople, dataPeople }) => {\n      const pageData = {\n        foundPeople,\n        nextPage: dataPeople.next,\n        prevPage: dataPeople.previous,\n        foundCount: dataPeople.count,\n        loading: false,\n        term: this.state.term\n      }\n\n      this.setState(pageData)\n\n      this.setAppState(pageData)\n    });\n  };\n\n  render() {\n    return (\n      <Main\n        state={this.state}\n        onChange={this.onChange}\n        onInput={this.onInput}\n        onChangePage={this.onChangePage}\n        history={this.props.history}\n      />\n    );\n  }\n}","import React from 'react';\nimport { WithSwappiService } from '../HOChelpers/WithSwappiService';\nimport ItemDetails, { Record } from \"../ItemDetails/ItemDetails\";\n\n\n\nconst PersonDetails = (props) => {  \n  return (\n    <ItemDetails {...props}>\n      <Record field=\"gender\" label=\"Gender:\"/>\n      <Record field=\"eyeColor\" label=\"Eye color:\"/>\n    </ItemDetails>\n  )\n};\n\nconst mapMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getPerson,\n    getImageURL: swappi.getPersonImage\n  }\n}\n\nexport default WithSwappiService(PersonDetails, mapMethodsToProps);","import React from 'react';\nimport { Header } from '../Header/Header';\nimport SwapiService from '../../services/SwapiService';\nimport './app.css'\nimport { SwappiServiceProvider } from '../SwappiServiceContext/SwappiServiceContext';\nimport RandomPlanet from '../RandomPlanet/RandomPlanet';\nimport PeoplePage from '../pages/PeoplePage';\nimport PlanetPage from '../pages/PlanetPage';\nimport StarshipPage from '../pages/StarshipPage';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport StarshipDetails from '../Details/StarshipDetails';\nimport MainContainer from '../pages/Main';\nimport PersonDetails from '../Details/PersonDetails';\n\nexport default class App extends React.Component {\n\n  swappi = new SwapiService();\n\n  state = {\n    term: \"\",\n    foundPeople: [],\n    nextPage: null,\n    prevPage: null,\n    foundCount: null,\n  }  \n\n  setAppState = (settings) => {\n    this.setState(settings)\n  }\n\n  render() {\n    return (      \n      <SwappiServiceProvider value={{appState: this.state, swapi: this.swappi, setAppState : this.setAppState}}>\n        <Router>\n          <div className=\"stardb-app\">\n            <Header />\n            <RandomPlanet/>\n            <Route path='/' component={({history}) => {\n              return <MainContainer appState={this.state} setAppState={this.setAppState} history={history}/>}} exact></Route>\n            <Route path='/people' exact component={PeoplePage}></Route>\n            <Route path='/people/:id' render={({ match }) => {\n              const { id } = match.params;\n              return <PersonDetails itemId={id} />\n            }}></Route>\n            <Route path='/planets' component={PlanetPage}></Route>\n            <Route path='/starships' exact component={StarshipPage}></Route>\n            <Route path='/starships/:id' render={({ match }) => {\n              const { id } = match.params;\n              return <StarshipDetails itemId={id} />\n            }}></Route>\n          </div>\n        </Router>\n      </SwappiServiceProvider>\n    )\n  }\n}\n\n// <Route path='/' component={MainContainer} exact></Route>\n\n//<Route path='/' component={() => {\n//  return <MainContainer appState={this.state} setAppState={this.setAppState}/>}} exact></Route>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}