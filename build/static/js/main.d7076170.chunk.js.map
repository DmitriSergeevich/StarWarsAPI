{"version":3,"sources":["components/Header/Header.js","services/SwapiService.js","components/SwappiServiceContext/SwappiServiceContext.js","components/ErrorRender/ErrorRender.js","components/Spiner/Spiner.js","components/RandomPlanet/RandomPlanet.js","components/HOChelpers/WithSwappiService.js","components/ItemDetails/ItemDetails.js","components/Details/PersonDetails.js","components/HOChelpers/WithData.js","components/ItemList/ItemList.js","components/ListOfItems/ListOfItems.js","components/Row/Row.js","components/pages/PeoplePage.js","components/Details/PlanetDetails.js","components/pages/PlanetPage.js","components/pages/StarshipPage.js","components/Details/StarshipDetails.js","components/app/app.js","index.js"],"names":["Header","className","to","SwapiService","_apiBase","_ImageUrlBase","extractId","url","match","transformPerson","person","id","name","gender","birthYear","birth_year","eyeColor","eye_color","getAllPeople","a","getResource","people","results","map","getPerson","transformPlanet","planet","population","diameter","period","rotation_period","getAllPlanet","planets","getPlanet","transformStarship","starship","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","getAllStarships","starships","getStarship","getPersonImage","getStarshipImage","getPlanetImage","fetch","this","res","ok","Error","status","json","React","createContext","SwappiServiceProvider","Provider","SwappiSeviceConsumer","Consumer","ErrorRender","Spiner","RandomPlanet","state","loading","error","onPlanetLoaded","setState","onError","swapi","updatePlanet","Math","floor","random","then","catch","interval","setInterval","clearInterval","hasData","loader","planetInfo","PlanetView","errorLoading","Component","Fragment","src","alt","WithSwappiService","Wrapped","mapMethodsToProps","props","swappi","serviceProps","ItemDetails","item","image","updateItem","itemId","getData","getImageURL","prevProps","Children","children","child","idx","cloneElement","Record","label","field","WithData","View","data","ItemList","onItemSelected","renderLabel","items","onClick","withChildFunction","fn","renderName","PersonList","StarshipList","PlanetList","Row","leftItem","rightItem","withRouter","history","params","push","PlanetPage","selectedItem","App","value","path","render","exact","component","PeoplePage","StarshipPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d7076170.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\nimport { Link } from 'react-router-dom';\n\nexport const Header = () => {\n  return (\n    <div className=\"header d-flex\">\n      <h3>\n        <Link to='/'>Star DB</Link>\n      </h3>      \n      <ul className=\"d-flex\">\n        <li>\n          <Link to='/people/'>People</Link>\n        </li>\n        <li>\n          <Link to='/planets/'>Planets</Link>\n        </li>\n        <li>\n          <Link to='/starships/'>Starships</Link>\n        </li>\n      </ul>    \n    </div>\n  )\n}","export default class SwapiService {\n  _apiBase = 'https://swapi.dev/api';\n  _ImageUrlBase = 'https://starwars-visualguide.com/assets/img'\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}` + url);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${this._apiBase + url}, recived ${res.status}`)\n    }\n    return await res.json()\n  }\n  \n  extractId = (url) => {\n    const regExp = /\\/([0-9]*)\\/$/;\n    return url.match(regExp)[1];    \n  }\n  \n  transformPerson = (person) => {\n    return {      \n      id: this.extractId(person.url),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color\n    }\n  }\n\n  getAllPeople = async () => {\n    const people = await this.getResource('/people/');\n    return people.results.map(this.transformPerson)\n  }\n\n  getPerson= async (id) => {   \n    const person = await this.getResource('/people/' + id);    \n    return this.transformPerson(person)\n  }\n  \n  transformPlanet = (planet) => { \n    return {\n      id: this.extractId(planet.url),\n      name: planet.name,\n      population: planet.population,\n      diameter: planet.diameter,\n      period: planet.rotation_period\n    }\n  }\n\n  getAllPlanet = async () => {\n    const planets = await this.getResource('/planets/');    \n    return planets.results.map(this.transformPlanet)\n  }\n\n  getPlanet = async (id) => {\n    const planet = await this.getResource('/planets/' + id)\n    return this.transformPlanet(planet)\n  }\n  \n  transformStarship = (starship) => {    \n    return {\n      id: this.extractId(starship.url),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity\n    }\n  }\n\n  getAllStarships = async () => {\n    const starships = await this.getResource('/starships/');\n    return starships.results.map(this.transformStarship);\n  }\n\n  getStarship = async (id) => {\n    const starship = await this.getResource('/starships/' + id);\n    return this.transformStarship(starship);\n  }\n  \n  getPersonImage = ({ id }) => {\n    return `${this._ImageUrlBase}/characters/${id}.jpg`\n  }\n  getStarshipImage = ({ id }) => {\n    return `${this._ImageUrlBase}/starships/${id}.jpg`\n  }\n  getPlanetImage = ({ id }) => {\n    return `${this._ImageUrlBase}/planets/${id}.jpg`\n  }\n}\n\n","import React from 'react';\n\nexport const {\n  Provider: SwappiServiceProvider,\n  Consumer: SwappiSeviceConsumer\n} = React.createContext();\n","import React from 'react';\nimport './ErrorRender.css';\n\nexport const ErrorRender = () => {\n  return (\n    <div>\n      <h5>Oops...</h5>\n      <p>Something go wrong</p>\n    </div>\n  )\n}","import React from 'react';\n\nimport './Spiner.css';\n\nexport const Spiner = () => {\n  return (    \n    <div className=\"loadingio-spinner-eclipse-o4362mbylv\">\n      <div className=\"ldio-7u5e9lfcd4h\">\n        <div></div>\n      </div>\n    </div>  \n  );\n}","import React, { Component } from 'react';\nimport SwapiService from '../../services/SwapiService';\nimport { ErrorRender } from '../ErrorRender/ErrorRender';\nimport { Spiner } from '../Spiner/Spiner';\nimport './RandomPlanet.css';\n\nexport default class RandomPlanet extends Component {\n  \n  state = {\n    planet: {},\n    loading: true,\n    error: false,\n  }\n  \n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onPlanetLoaded = (planet) => {\n    this.setState({\n      planet,\n      loading: false,\n      error: false\n    });\n  }\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  }\n\n  swapi = new SwapiService();\n\n  updatePlanet = () => {\n    const id = Math.floor(Math.random() * 25) + 3;\n    this.swapi.getPlanet(id)\n    .then(this.onPlanetLoaded)\n    .catch(this.onError)\n  }\n\n  render() {\n    const {planet, loading, error} = this.state;\n    const hasData = !(loading || error);\n    const loader = loading ? <Spiner/> : null;\n    const planetInfo = hasData ? <PlanetView planet={planet}/> : null;\n    const errorLoading = error ? <ErrorRender/> : null;\n\n    return (\n      <div className=\"random-planet jumbotron rounded\">\n        {loader}\n        {planetInfo}\n        {errorLoading}\n      </div>\n    );    \n  }\n}\n\nfunction PlanetView({ planet }) {\n  const {  \n    id,\n    name,\n    population,\n    period,\n    diameter\n  } = planet;\n\n  return (\n    <React.Fragment>\n      <img className=\"planet-image\"\n             src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} \n             alt=\"planet img\"/>\n      <div>\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <span className=\"term\">Population</span>\n            <span>{population}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Rotation Period</span>\n            <span>{period}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </React.Fragment>\n  )\n}","import React from 'react';\nimport { SwappiSeviceConsumer } from '../SwappiServiceContext/SwappiServiceContext';\n\n\nexport const WithSwappiService = (Wrapped, mapMethodsToProps) => {\n  return (props)=>{\n    return (\n      <SwappiSeviceConsumer >\n        {\n          (swappi) => {\n            const serviceProps = mapMethodsToProps(swappi)\n            return (\n            <Wrapped {...props} {...serviceProps} />\n            )\n          }\n        }\n      </SwappiSeviceConsumer>\n    )\n  } \n}","import React, { Component } from 'react';\nimport SwapiService from '../../services/SwapiService';\nimport './ItemDetails.css';\n\nexport default class ItemDetails extends Component {\n  \n  swapi = new SwapiService();\n\n  state = {\n    item: null,\n    image: null\n  }\n  \n  componentDidMount() {\n    this.updateItem();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if(this.props.itemId !== prevProps.itemId) {\n      this.updateItem();\n    }\n  }\n\n  updateItem = () => {\n    const { itemId, getData, getImageURL } = this.props;\n    \n    if(!itemId) {\n      return\n    }\n\n    getData(itemId)\n    .then( (item) => this.setState({\n       item,\n       image: getImageURL(item)\n    }));\n    \n  }\n\n  render() {\n    const { item, image } = this.state\n    if(!this.state.item) {\n      return <span>Select a person from a list</span>\n    }\n\n    const {      \n      name,\n      \n    } = item;\n    \n    return (\n      <div className=\"person-details card\">\n        <img className=\"person-image\"\n          src={image}\n          alt=\"img\"/>\n        <div className=\"card-body\">\n          <h4>{name}</h4>\n          <ul className=\"list-group list-group-flush\">\n            {\n              React.Children.map(this.props.children, (child, idx) => {\n                return React.cloneElement(child, {item});\n            })\n            }\n          </ul>\n          \n        </div>        \n      </div>\n      \n    )\n  }\n}\n\nexport const Record = ({item, label, field}) => {\n  return (\n    \n    <li className=\"list-group-item\">\n      <span className=\"term\">{label}</span>\n      <span>{item[field]}</span>\n    </li>\n  )\n}","import React from 'react';\nimport { WithSwappiService } from '../HOChelpers/WithSwappiService';\nimport ItemDetails, { Record } from \"../ItemDetails/ItemDetails\";\n\n\n\nconst PersonDetails = (props) => {  \n  return (\n    <ItemDetails {...props}>\n      <Record field=\"gender\" label=\"Gender:\"/>\n      <Record field=\"eyeColor\" label=\"Eye color:\"/>\n    </ItemDetails>\n  )\n};\n\nconst mapMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getPerson,\n    getImageURL: swappi.getPersonImage\n  }\n}\n\nexport default WithSwappiService(PersonDetails, mapMethodsToProps);","import React, { Component } from 'react';\nimport { Spiner } from '../Spiner/Spiner';\n\nconst WithData = (View) => {\n  return class extends Component {\n\n    state = {\n      data: null\n    };\n\n    componentDidMount() {\n      this.props.getData()\n        .then((data) => {\n          this.setState({\n            data\n          });\n        });\n    }\n\n    render() {\n      const { data } = this.state;\n\n      if (!data) {\n        return <Spiner />;\n      }\n\n      return <View {...this.props} data={data} />;\n    }\n  };\n};\n\nexport default WithData;\n","import './ItemList.css';\n\nexport const ItemList = (props) => {\n\n  const { data, onItemSelected, children: renderLabel } = props;\n    \n    const items = data.map((item) => {\n    const { id } = item;\n    const label = renderLabel(item);\n\n    return (\n      <li className=\"list-group-item\"\n          key={id}\n          onClick={() => onItemSelected(id)}>\n        {label}\n      </li>\n    );\n  });\n\n  return (\n    <ul className=\"item-list list-group\">\n      {items}\n    </ul>\n  );\n  \n}\n\n","import React from \"react\";\nimport WithData from '../HOChelpers/WithData';\nimport { WithSwappiService } from \"../HOChelpers/WithSwappiService\";\nimport { ItemList } from '../ItemList/ItemList';\n\nconst withChildFunction = (Wrapped, fn) => {\n  return (props) => {\n    return (\n      <Wrapped {...props}>\n        {fn}\n      </Wrapped>\n    )\n    \n  }    \n}\n\nconst renderName = ({ name }) => <span>{name}</span>\nconst renderNameAndModel = ({ name, model }) => <span>{`${name} (${model})`}</span>\n\nconst mapPersonMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getAllPeople,\n  }\n}\nconst mapPlanetMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getAllPlanet,\n  }\n}\nconst mapStarshipMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getAllStarships,\n  }\n}\n\nconst PersonList = WithSwappiService( WithData(\n                    withChildFunction(ItemList, renderName)), mapPersonMethodsToProps);\nconst StarshipList = WithSwappiService( WithData(\n                      withChildFunction(ItemList, renderNameAndModel)), mapStarshipMethodsToProps);\nconst PlanetList = WithSwappiService(WithData(\n                     withChildFunction(ItemList, renderName)), mapPlanetMethodsToProps);\n\nexport {PersonList, StarshipList, PlanetList}","import React from \"react\";\n\nexport const Row = ({ leftItem, rightItem }) => {\n  return (\n    <div className=\"row mb2 item-section\">\n        <div className=\"col-md-6\">\n          {leftItem}\n        </div>\n        <div className=\"col-md-6\">\n          {rightItem}\n        </div>\n    </div>\n  )\n}","import React from 'react';\nimport PersonDetails from '../Details/PersonDetails';\nimport { PersonList } from '../ListOfItems/ListOfItems';\nimport { Row } from '../Row/Row';\nimport { withRouter } from 'react-router-dom';\n\nconst PeoplePage = ({ history, match }) => {  \n  const { id } = match.params;\n  return (\n    <Row \n      leftItem={<PersonList onItemSelected={(id) => history.push(id)}/>}\n      rightItem={<PersonDetails itemId={ id }/>}\n    />\n  )\n}  \n\nexport default withRouter(PeoplePage)","import React from 'react';\nimport { WithSwappiService } from '../HOChelpers/WithSwappiService';\nimport ItemDetails, { Record } from \"../ItemDetails/ItemDetails\";\n\n\nconst PlanetDetails = (props) => {\n  return (\n   <ItemDetails {...props}>          \n      <Record field=\"population\" label=\"Population:\"/>\n      <Record field=\"period\" label=\"Rotation period:\"/>\n      <Record field=\"diameter\" label=\"Diameter:\"/>  \n    </ItemDetails>\n  )\n\n}\n\nconst mapMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getPlanet,\n    getImageURL: swappi.getPlanetImage\n  }\n}\n\nexport default WithSwappiService(PlanetDetails, mapMethodsToProps);","import React from 'react';\nimport PlanetDetails from '../Details/PlanetDetails';\nimport { PlanetList } from '../ListOfItems/ListOfItems';\nimport { Row } from '../Row/Row';\n\nexport default class PlanetPage extends React.Component {\n  \n  state = {\n    selectedItem: null\n  }\n  \n  onItemSelected = (selectedItem) => {\n    this.setState({ selectedItem });\n  }\n\n  render() {\n    const { selectedItem } = this.state;\n    return (\n      <Row \n        leftItem={<PlanetList onItemSelected={this.onItemSelected}/>}\n        rightItem={< PlanetDetails itemId={selectedItem}/>}\n      />\n    )\n  }  \n}","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { StarshipList } from '../ListOfItems/ListOfItems';\n\n\nconst StarshipPage = ({ history }) => {\n  \n  return (\n    <StarshipList\n      onItemSelected={(id) => {\n        history.push(id)\n      }}/>\n      \n  )\n  \n}\n\nexport default withRouter(StarshipPage);","import React from 'react';\nimport { WithSwappiService } from '../HOChelpers/WithSwappiService';\nimport ItemDetails, { Record } from \"../ItemDetails/ItemDetails\";\n\n\nconst StarshipDetails = (props) => {  \n  return (\n    <ItemDetails {...props}>\n      <Record field=\"model\" label=\"Model:\"/>\n      <Record field=\"length\" label=\"Length:\"/>\n      <Record field=\"costInCredits\" label=\"Cost:\"/>\n    </ItemDetails>\n  )\n  \n}\n\nconst mapMethodsToProps = (swappi) => {\n  return {\n    getData: swappi.getStarship,\n    getImageURL: swappi.getStarshipImage\n  }\n}\n\nexport default WithSwappiService(StarshipDetails, mapMethodsToProps);","import React from 'react';\nimport { Header } from '../Header/Header';\nimport SwapiService from '../../services/SwapiService';\nimport './app.css'\nimport { SwappiServiceProvider } from '../SwappiServiceContext/SwappiServiceContext';\nimport RandomPlanet from '../RandomPlanet/RandomPlanet';\nimport PeoplePage from '../pages/PeoplePage';\nimport PlanetPage from '../pages/PlanetPage';\nimport StarshipPage from '../pages/StarshipPage';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport StarshipDetails from '../Details/StarshipDetails';\nexport default class App extends React.Component {\n\n  swappi = new SwapiService();\n  \n  render() {\n    return (      \n      <SwappiServiceProvider value={this.swappi}>\n        <Router>\n          <div className=\"stardb-app\">\n            <Header />\n            <RandomPlanet/>\n            \n            <Route path='/' render={() => <h2>Welcome to star wars library</h2>} exact></Route>\n            <Route path='/people/:id?' component={PeoplePage}></Route>\n            <Route path='/planets' component={PlanetPage}></Route>\n            <Route path='/starships' exact component={StarshipPage}></Route>\n            <Route path='/starships/:id' render={({ match }) => {\n              const { id } = match.params;\n              return <StarshipDetails itemId={id} />\n            }}></Route>\n               \n          </div>\n        </Router>\n       \n      </SwappiServiceProvider>      \n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}